#!/usr/bin/python2
import sys, os


c_file = open("hal/startup.c", "w")
c_file.write( '/* startup.c is AUTOGENERATED. Do not edit. Change *.def instead. */\n' )
c_file.write( '#include "stdint.h"\n' )
c_file.write( '#include "regs.h"\n' )
c_file.write( '#include "tools.h"\n' )


c_file.write("\n")
c_file.write("extern int main(void);\n")
c_file.write("extern unsigned int __StackTop; /* provided by linker script */\n")
c_file.write("\n") 
c_file.write("extern unsigned long _etext;\n")
c_file.write("extern unsigned long _data;\n")
c_file.write("extern unsigned long _edata;\n")
c_file.write("extern unsigned long _bss;\n")
c_file.write("extern unsigned long _ebss;\n")
c_file.write(" \n")
c_file.write("void reset_handler(void)\n")
c_file.write("{\n")
c_file.write("    unsigned long *pulSrc, *pulDest;\n")
c_file.write("    unsigned char * bssDest;\n")
c_file.write(" \n")
c_file.write("    /*\n")
c_file.write("     * Copy the data segment initializers from flash to SRAM.\n")
c_file.write("     */\n")
c_file.write("    pulSrc = &_etext;\n")
c_file.write("    pulDest = &_data; \n")
c_file.write("\n")
c_file.write("    while(pulDest < &_edata)\n")
c_file.write("    {\n")
c_file.write("        *pulDest++ = *pulSrc++;\n")
c_file.write("    }\n")
c_file.write("\n")
c_file.write("    /*\n")
c_file.write("     * Zero-init the BSS section\n")
c_file.write("     */\n")
c_file.write("    bssDest = (unsigned char *)&_bss;\n")
c_file.write("\n")
c_file.write("    while(bssDest < (unsigned char *)&_ebss)\n")
c_file.write("    {\n")
c_file.write("        *bssDest++ = 0u;\n")
c_file.write("    }\n")
c_file.write(" \n")
c_file.write("    /*\n")
c_file.write("     * Call the kernel entry point.\n")
c_file.write("     */\n")
c_file.write("    main();\n")
c_file.write("}\n")
c_file.write(" \n")
c_file.write(" \n")
c_file.write(" \n")

irqlist = []
''' Read IRQ list from CPU and BOARD irq.def files '''
for filen in sys.argv[1:]:
    f = open(filen)
    for l in f:
        if len(l) > 0:
            if l.startswith('#'):
                continue
            irqlist.append(l.rstrip('\n'))

# Introduce : Default handler
c_file.write("void __attribute__((weak)) Default_Handler(void)\n")
c_file.write("{\n")
c_file.write("    while(1);\n")
c_file.write("}\n\n")

for irq in irqlist:
    if (irq != "Reset" and irq != "RESERVED"):
        c_file.write("void __attribute__((weak)) %s_Handler(void)\n" % irq)
        c_file.write("{\n")
        if irq == "HardFault":
            c_file.write ("    volatile uint32_t hfsr = GET_REG(SYSREG_HFSR);\n")
            c_file.write ("    volatile uint32_t bfsr = GET_REG(SYSREG_BFSR);\n")
            c_file.write ("    volatile uint32_t bfar = GET_REG(SYSREG_BFAR);\n")
            c_file.write ("    volatile uint32_t afsr = GET_REG(SYSREG_AFSR);\n")
        c_file.write("    while(1);\n")
        c_file.write("}\n\n")

        
c_file.write('__attribute__ ((section(".isr_vector")))\n')
c_file.write('void (* const g_pfnVectors[])(void) =\n')
c_file.write('{\n')
c_file.write('    (void *)&__StackTop,     /** <-- Initial stack pointer **/\n')

for irq in irqlist:
    if irq == 'RESERVED':
        irq = "Default"
    if len(irq) > 1:
        c_file.write('    %s_Handler,\n' % irq)

c_file.write('};\n')

